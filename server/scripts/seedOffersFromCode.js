const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
require('dotenv').config();

const User = require('../models/User');
const Offer = require('../models/Offer');

async function seedOffersFromCode() {
  try {
    await mongoose.connect(process.env.MONGO_URI);
    console.log('‚úÖ Connect√© √† MongoDB\n');

    // Cr√©er un employeur de test s'il n'existe pas
    let employer = await User.findOne({ email: 'employeur.test@godriver.ci' });
    
    if (!employer) {
      const hashedPassword = await bcrypt.hash('password123', 10);
      employer = await User.create({
        email: 'employeur.test@godriver.ci',
        passwordHash: hashedPassword,
        role: 'client',
        firstName: 'Employeur',
        lastName: 'Test',
        phone: '+225 07 00 00 00 00',
        isActive: true,
        isEmailVerified: true
      });
      console.log('‚úÖ Employeur de test cr√©√©\n');
    } else {
      console.log('‚úÖ Employeur de test existant trouv√©\n');
    }

    // Offres de test √† enregistrer avec toutes les informations
    const testOffers = [
      {
        title: 'Chauffeur personnel',
        company: 'Entreprise Priv√©e',
        location: 'Cocody, Abidjan',
        salary: '250,000 - 350,000 FCFA',
        contractType: 'CDI',
        workType: 'Temps plein',
        vehicleType: 'Berline',
        experience: '3-5 ans',
        description: 'Nous recherchons un chauffeur personnel exp√©riment√© pour assurer le transport quotidien de notre dirigeant. Vous serez responsable de la conduite en toute s√©curit√©, de l\'entretien du v√©hicule et de la planification des itin√©raires.',
        requirements: [
          'Permis de conduire cat√©gorie B valide',
          '3 √† 5 ans d\'exp√©rience en tant que chauffeur',
          'Excellente connaissance d\'Abidjan',
          'Ponctualit√© et discr√©tion',
          'Pr√©sentation soign√©e'
        ],
        benefits: [
          'Salaire attractif',
          'Assurance sant√©',
          'Cong√©s pay√©s',
          'Formation continue',
          'V√©hicule de fonction'
        ]
      },
      {
        title: 'Chauffeur VIP',
        company: 'H√¥tel 5 √©toiles',
        location: 'Plateau, Abidjan',
        salary: '400,000 - 500,000 FCFA',
        contractType: 'CDI',
        workType: 'Temps plein',
        vehicleType: 'V√©hicule de luxe',
        experience: '5-10 ans'
      },
      {
        title: 'Chauffeur livreur',
        company: 'Soci√©t√© de logistique',
        location: 'Yopougon, Abidjan',
        salary: '180,000 - 220,000 FCFA',
        contractType: 'CDD',
        workType: 'Temps plein',
        vehicleType: 'Utilitaire',
        experience: '1-3 ans'
      },
      {
        title: 'Chauffeur de direction',
        company: 'Multinationale',
        location: 'Marcory, Abidjan',
        salary: '350,000 - 450,000 FCFA',
        contractType: 'CDI',
        workType: 'Temps plein',
        vehicleType: '4x4/SUV',
        experience: '5-10 ans'
      },
      {
        title: 'Chauffeur scolaire',
        company: '√âcole internationale',
        location: 'Cocody, Abidjan',
        salary: '200,000 - 280,000 FCFA',
        contractType: 'CDI',
        workType: 'Temps partiel',
        vehicleType: 'Minibus',
        experience: '3-5 ans'
      },
      {
        title: 'Chauffeur taxi',
        company: 'Compagnie de taxi',
        location: 'Abobo, Abidjan',
        salary: '150,000 - 200,000 FCFA',
        contractType: 'Ind√©pendant',
        workType: 'Flexible',
        vehicleType: 'Berline',
        experience: '1-3 ans'
      }
    ];

    console.log('üìä Enregistrement des offres...\n');

    for (const offerData of testOffers) {
      // Extraire la ville et la zone de la location
      const [zone, city] = offerData.location.split(', ');
      
      // D√©terminer le type d'offre bas√© sur le titre
      let offerType = 'Personnel';
      if (offerData.title.toLowerCase().includes('livreur')) {
        offerType = 'Livraison';
      } else if (offerData.title.toLowerCase().includes('taxi')) {
        offerType = 'VTC';
      } else if (offerData.title.toLowerCase().includes('transport')) {
        offerType = 'Transport';
      }

      // Extraire le salaire min et max
      const salaryMatch = offerData.salary.match(/(\d[\d\s,]*)/g);
      let minSalary = 200000;
      let maxSalary = 300000;
      
      if (salaryMatch && salaryMatch.length >= 2) {
        minSalary = parseInt(salaryMatch[0].replace(/[\s,]/g, ''));
        maxSalary = parseInt(salaryMatch[1].replace(/[\s,]/g, ''));
      }
      
      const avgSalary = Math.floor((minSalary + maxSalary) / 2);

      // Mapper l'exp√©rience aux valeurs enum
      let experienceEnum = '1-3 ans';
      if (offerData.experience === '5-10 ans' || offerData.experience === '5+ ans') {
        experienceEnum = '5+ ans';
      } else if (offerData.experience === '3-5 ans') {
        experienceEnum = '3-5 ans';
      } else if (offerData.experience === '1-3 ans') {
        experienceEnum = '1-3 ans';
      } else {
        experienceEnum = 'D√©butant';
      }

      // Mapper le type de v√©hicule aux valeurs enum
      let vehicleTypeEnum = 'autre';
      const vehicleLower = offerData.vehicleType.toLowerCase();
      if (vehicleLower.includes('berline')) {
        vehicleTypeEnum = 'berline';
      } else if (vehicleLower.includes('suv') || vehicleLower.includes('4x4')) {
        vehicleTypeEnum = 'suv';
      } else if (vehicleLower.includes('utilitaire')) {
        vehicleTypeEnum = 'utilitaire';
      } else if (vehicleLower.includes('moto')) {
        vehicleTypeEnum = 'moto';
      } else if (vehicleLower.includes('minibus') || vehicleLower.includes('van')) {
        vehicleTypeEnum = 'van';
      }

      // Mapper le workType
      let workTypeEnum = 'temps_plein';
      if (offerData.workType.toLowerCase().includes('partiel')) {
        workTypeEnum = 'temps_partiel';
      } else if (offerData.workType.toLowerCase().includes('flexible') || offerData.workType.toLowerCase().includes('ponctuel')) {
        workTypeEnum = 'ponctuel';
      }

      // Cr√©er l'offre
      const offer = await Offer.create({
        title: offerData.title,
        description: `Nous recherchons un ${offerData.title.toLowerCase()} exp√©riment√© pour rejoindre notre √©quipe. Vous serez en charge de la conduite et de l'entretien du v√©hicule.`,
        type: offerType,
        employerId: employer._id,
        requirements: {
          licenseType: 'B',
          experience: experienceEnum,
          vehicleType: vehicleTypeEnum,
          zone: zone
        },
        conditions: {
          salary: avgSalary,
          salaryType: 'mensuel',
          workType: workTypeEnum,
          startDate: new Date(),
          schedule: offerData.workType
        },
        status: 'active',
        location: {
          address: zone,
          city: city || 'Abidjan',
          coordinates: {}
        },
        company: offerData.company,
        contractType: offerData.contractType,
        salaryRange: offerData.salary,
        offerType: offerType,
        isUrgent: false,
        isDirect: false
      });

      console.log(`‚úÖ ${offer.title}`);
      console.log(`   Entreprise: ${offer.company}`);
      console.log(`   Localisation: ${offer.location.address}, ${offer.location.city}`);
      console.log(`   Salaire: ${offer.salaryRange}`);
      console.log(`   Contrat: ${offer.contractType}`);
      console.log(`   Type: ${offer.type}\n`);
    }

    console.log(`\nüìä R√©sum√©:`);
    console.log(`   ${testOffers.length} offres enregistr√©es avec succ√®s!\n`);
    
    console.log('‚úÖ Seed termin√©!');
    console.log('\nüìù Informations de connexion employeur:');
    console.log('   Email: employeur.test@godriver.ci');
    console.log('   Mot de passe: password123\n');

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    console.error(error);
  } finally {
    await mongoose.connection.close();
    console.log('üëã Connexion ferm√©e');
  }
}

seedOffersFromCode();
