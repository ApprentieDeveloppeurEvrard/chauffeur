const mongoose = require('mongoose');
require('dotenv').config();

const Offer = require('../models/Offer');

async function addContractTypes() {
  try {
    await mongoose.connect(process.env.MONGO_URI);
    console.log('‚úÖ Connect√© √† MongoDB\n');

    // R√©cup√©rer toutes les offres
    const offers = await Offer.find();
    console.log(`üìä ${offers.length} offres trouv√©es\n`);

    let updated = 0;

    for (const offer of offers) {
      // D√©terminer le type de contrat bas√© sur le type d'offre
      let contractType;
      
      switch(offer.type) {
        case 'Personnel':
          contractType = 'CDI';
          break;
        case 'VTC':
          contractType = 'Freelance';
          break;
        case 'Livraison':
          contractType = 'CDD';
          break;
        case 'Transport':
          contractType = 'CDI';
          break;
        default:
          // Assigner al√©atoirement si type inconnu
          const types = ['CDI', 'CDD', 'Int√©rim', 'Freelance'];
          contractType = types[Math.floor(Math.random() * types.length)];
      }

      // Mettre √† jour l'offre
      await Offer.findByIdAndUpdate(offer._id, { 
        $set: { contractType: contractType }
      });

      updated++;
      console.log(`‚úÖ ${offer.title}`);
      console.log(`   Type d'offre: ${offer.type}`);
      console.log(`   Type de contrat: ${contractType}`);
      console.log(`   Entreprise: ${offer.company || 'N/A'}\n`);
    }

    console.log(`\nüìä R√©sum√©:`);
    console.log(`   Total: ${offers.length} offres`);
    console.log(`   Mises √† jour: ${updated} offres\n`);

    console.log('‚úÖ Tous les types de contrat ont √©t√© ajout√©s!');

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  } finally {
    await mongoose.connection.close();
    console.log('üëã Connexion ferm√©e');
  }
}

addContractTypes();
