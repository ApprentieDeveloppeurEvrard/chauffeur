const mongoose = require('mongoose');
const Offer = require('../models/Offer');
const User = require('../models/User');
require('dotenv').config();

async function assignOffersToEmployer() {
  try {
    // Connexion √† MongoDB
    await mongoose.connect(process.env.MONGO_URI);
    console.log('‚úÖ Connect√© √† MongoDB');

    // Trouver l'employeur avec l'email "employeur1@gmail.com"
    const employer = await User.findOne({ email: 'employeur1@gmail.com' });
    
    if (!employer) {
      console.log('‚ùå Employeur non trouv√© avec l\'email: employeur1@gmail.com');
      console.log('Cr√©ation d\'un compte employeur...');
      
      // Cr√©er un compte employeur si il n'existe pas
      const newEmployer = new User({
        email: 'employeur1@gmail.com',
        password: '$2a$10$YourHashedPasswordHere', // Mot de passe hash√©
        role: 'employer',
        firstName: 'Employeur',
        lastName: 'Test',
        phone: '+225 07 00 00 00 00',
        isActive: true
      });
      
      await newEmployer.save();
      console.log('‚úÖ Compte employeur cr√©√©');
      
      // Mettre √† jour toutes les offres
      const result = await Offer.updateMany(
        { type: { $ne: 'product' } }, // Toutes les offres sauf les produits
        { $set: { employer: newEmployer._id } }
      );
      
      console.log(`‚úÖ ${result.modifiedCount} offres d'emploi assign√©es √† employeur1@gmail.com`);
    } else {
      console.log('‚úÖ Employeur trouv√©:', employer.email);
      console.log('ID de l\'employeur:', employer._id);
      
      // Mettre √† jour toutes les offres d'emploi (type !== 'product')
      const result = await Offer.updateMany(
        { type: { $ne: 'product' } }, // Toutes les offres sauf les produits
        { $set: { employer: employer._id } }
      );
      
      console.log(`‚úÖ ${result.modifiedCount} offres d'emploi assign√©es √† employeur1@gmail.com`);
      
      // Afficher les offres mises √† jour
      const offers = await Offer.find({ employer: employer._id }).select('title type');
      console.log('\nüìã Offres assign√©es:');
      offers.forEach((offer, index) => {
        console.log(`${index + 1}. ${offer.title} (${offer.type})`);
      });
    }

    await mongoose.connection.close();
    console.log('\n‚úÖ Script termin√© avec succ√®s');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    await mongoose.connection.close();
    process.exit(1);
  }
}

assignOffersToEmployer();
